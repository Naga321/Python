Task 1 - 
     Compilor is a software program that converts high level program language into a low level machine readable language 
     Interpreter is a program that directly executes set of instructions line by line without previously getting compiled to machine level language
     
Task 2 -    Rules for creating variable :-
                   should begin with alphabets (upper case or lower case) or digits or underscore. Other than this we get error.
                    variable should not begin with digits
Task 3 -   
            Variable- It is a storage location used to hold the value. 
            
            Data type - Indicates the type of data present inside the variable
            Data types in python:- int, float, str, bool, complex
            int - used to represent whole numbers 
                  example - a=10
                            type(a) #<class 'int'>
            float - used to represent floating point or decimal values
                    example - b=9.567
                              type(b) #<class 'float'>
            complex - used to represent complex numbers. Numbers which are in the form of a+bj where a is real part and b is imaginary part
                      example - d=2+10j
                                type(d) #<class 'complex'>
                      complex data types has some in-built attributes to retrieve real and imaginary part
                                 d.real=> 2.0
                                 d.imag=> 10.0
            bool - we can use this data type to represent boolean values. true and false
                   example - c=True
                             type(c) #<class 'bool'>
                   bool is case sensitive
            str - any character within sinle quotes(' ') or double quotes(" ")  
                  example - s1='python'
                            type(s1) #<class 'str'>
                            
                            
                            
                            
                            
            Keywords - certain set of special words used to represent specific meanings or functions
                       example - true, false, if, else
                       


Task 4 -   operators - used to perform certain specific operators
           types of operators - arithmetic operators (+, -, *, /, //, %, **)
                                example - a=10
                                           b=5
                                             print('a+b = ',a+b)    15
                                             print('a+b = ',a-b)     10
                                             print('a+b = ',a*b)     50
                                             print('a+b = ',a/b)     2.0
                                             print('a+b = ',a//b)    2
                                             print('a+b = ',a%b)      0
                                             print('a+b = ',a**b     100000 

                                comparision operators - (>,>=,<,<=)
                                example -    a=10
                                             b=20
                                             print(a>b)
                                             print(a>=b)
                                             print(a<b)
                                             print(a<=b)
                       
                                assignment operators - (=) - only used to assign values
                                
                                logical operators - and, or, not
                                                    and=> if both arguments are true only yhen it returns true
                                                    or => if one argument is true then it returns true
                                                    not => compliment 
                                                    
                                for non boolean types behaviour - 0 => false
                                                                  non zero => true
                                                                  empty string- false
                                                                  
                                                                  
                                                                  
                                                                  
 Task 6 -  type casting or type conversion -  
           following functions are available to convert from one type to another. 
           int(), float(), bool(), str(), complex()
           
           note:- cannot convert complex to int type
                  if str type has to be converted to int type, then it should only be of integral type value
                  ex - int('abc') - invalid literal for int() with base 10: 'BC'
                       int(2+5j) - TypeError: can't convert complex to int

                  cannot convert complex to float type
                  ex - float(2+3j)
	
                         Traceback (most recent call last):
                           File "<pyshell#11>", line 1, in <module>
                             float(2+3j)
                         TypeError: can't convert complex to float
                         
                  if str type has to be converted to float type, then it should only be of integral type value or float type value
                   ex - float('tiger')
	
                              Traceback (most recent call last):
                                File "<pyshell#12>", line 1, in <module>
                                  float('tiger')
                              ValueError: could not convert string to float: 'tiger'    
                    
                  cannot convert str type to complex data type
                     ex - complex('qwer')
                              Traceback (most recent call last):
                                File "<pyshell#4>", line 1, in <module>
                                  complex('qwer')
                              ValueError: complex() arg is a malformed string
                              
                  any type can be converted to bool type
                  
                  any type can be converted to string type

  
  
----------------------------------------------------------------------------------------------------------------------------------------------------------------

January 16-

Task 1- 

          s=input('Enter the string')
		print(s)
		mi=int(len(s)/2)
		print(s[mi])
		
		
Task 2 - s="***python***"
	print(s.strip('*'))
	
	
	s='**python******'
	print(s.rstrip('*'))
	
	
	s='**python******'
	print(s.lstrip('*'))
	
	
	
Task 3 - s1=input("enter string1")
	s2=input('enter string 2')
	s3=input('enter string 3')
	sp1=(s1.split())
	sp2=(s2.split())
	sp3=(s3.split())
	total=float(sp1[-1])+float(sp2[-1])+float(sp3[-1])
	print(total)
	
	
	

Task 4 - 
	


		
Task 5 - 	s1=input("Enter string 1")
		s2=input("Enter string 2")
		sm1=s1[int(len(s1)/2)]
		sm2=s2[int(len(s2)/2)]
		ascii_sm1=ord(sm1)
		ascii_sm2=ord(sm2)
		print(ascii_sm1 + ascii_sm2)
		
		
		
-----------------------------------------------------------------------------------------------------------------------------------------


      list=[]
      print(type(list))
      
      
      
      list_1=[]
	list_2=[5,6,7,8]
	print(list_1+list_2)
	
	
	
	
	
	list_1=[]
	list_2=[5,6,7,8]
	list_3=list_1+list_2
	print(list_3)
	list_4=[8,9,1,5,6,7,8,1]
	list_3.extend(list_4)
	print(list_3)
	
	
	
	
	list_1=[]
	list_2=[5,6,7,8]
	list_3=list_1+list_2
	print(list_3)
	list_4=[8,9,1,5,6,7,8,1]
	list_3.extend(list_4)
	print(list_3)
	print(list_3.count(8))
	print(sum(list_3))
	print((sum(list_3))/len(list_3))







Tuple - 


           
	   a=(1,2,3,4,5,6)
		b=(5,6,7,8,9)
		c=a+b
		print(c)

		
		


Set - 


                a=set()
		b=set()
		c={7,8,9,1,2,3,4,5,0}
		a.update(c)
		print(a)
		d={4,5,6,0}
		b.update(d)
		print(b)
		print(b.issubset(a))
		print(a.isdisjoint(b))
		a.discard(8)
		print(a)


		
	
	
	
Dictionary - 
                          
			  
			        a={1:["english","maths","science"], 2:[10,20,30], 3:["bio-botany","bio-zoology","Algebra"]}
				li=a[3]
				print(li)
				print(li[0][0:10:2])
				#print(li[-1][-1:1])
				print(tuple(a.keys()))
				li2=a[2]
				b=sum(li2)/len(li2)
				print(b)
				
				
				
				
Task 1 - 
                 Li1 = [2,3,4,5,[45,56,67,78,[111,222,333,[5555,3333,[10000,50000,"python","computer"],1111,7777,8888],444,555,666,777],89,23,34]]
                    
		    
		    
		    
		    Li1 = [2,3,4,5,[45,56,67,78,[111,222,333,[5555,3333,[10000,50000,"python","computer"],1111,7777,8888],444,555,666,777],89,23,34]]
			print(Li1[3])
			print(Li1[4][1])
			print(Li1[4][4][1])
			print(Li1[4][4][3][2][1])
			print(Li1[4][4][3][2][3][3:6])
			print(Li1[4][4][5])
			print(Li1[4][4][6])
			print(Li1[4][-3])
			print(Li1[4][4][3][2][2][4:])
			print(Li1[4][4][2])
			print(Li1[4][4][3][1])



Task 2 -
                        a = [1,2,3,4,[100,101,102,"Computer_science"],200,203]
			print(a[4][3][9:])
			print(a[4][3][:8])
			
			
			
Task 3 - 

		a = [1,2,3,4,[101,102,103,[201,202,[999]], 666, 777]]
		print(a[4][-2])
		print(a[4][3][0])
		print(a[4][1])
		print(a[4][3][2])
		print(a[4][5])
		
		
Task 4 -  

                Li1 = [2,3,"python","hello",4,5,0]  
			print(Li1[3][2:4])
			print(Li1[2][2:])
			
			
Task 5 - 

                    Li1 = [1,2,3,4,5,[11,22,33,44,55,[111,222,333,444],6666,7777],7777]
                          11
				6666
				6666
				7777
				7777
				222
				7777
				[33, 44]

			


Task 6 - 

                         a = {1: [1,2,3,"python"], 2:{10:"hello",20:"welcome",40: "science"}, 99: {3,4,5,6}, 40:{1:"zoology", 2:"Botany"}}
                                        b=a[1]
					print(b[3][0:2])
					c=a[2]
					print(c[10][1:])
					print(a[2][40][3:5])
					print(a[40][1][0:3])
					print(a[40][2][0:3])
					
					
					
					
		--------------------------------------------------------------------------------------------------------------------------------			
					
Jan 22					
----------------------------------------------------------------------------------------


Fizzbuzz -  

             n=int(input("Enter a number"))
		if n%3==0 and n%5==0:
		    print("Fizzbuzz")
		elif n%3==0:
			print("Fizz")
		elif n%5==0:
			print("Buzz")
		else:
		   print("enter proper number")
		   
		   
		   
		   
Task 1 :


               for i in range(0,76):
		    if i%5==0:
			print(str(i))
			
			
			
		for i in range(0,73):
			    if i%8==0:
				print(str(i))
				
		
		
		for i in range(75,0,-1):
		    if i%5==0:
			print(str(i))
			
			
			
		for i in range(96,71,-1):
		    if i%8==0:
			print(str(i))
	


Task 2 : 


                n=int(input("Enter the number of elements"))
		list=[]
		for i in range(n):
		     element=input("Enter the element")
		     list.append(element)

		print(list)    
		
		
		
		
		
		a={}
		n=int(input("Enter number of elements"))
		for i in range(n):
		    k=input("Enter key: ")
		    v=input("Enter value: ")
		    a.update({k:v})


		print(a)    
		
		
		
Task 4 : 


                a=int(input("Enter first number"))
		b=int(input("Enter second number"))
		list=[]
		for i in range(a,b):
		    if i%8==0:
			list.append(i)


		print(list)    
		
		
		
Task 5 :


                n=int(input("Enter number of elements"))
		li1=[]
		li_odd=[]
		li_even=[]
		for i in range(n):
		    element=input("Enter the element")
		    li1.append(element)
		    if i%2==0:
			li_even.append(element)
		    else:
			li_odd.append(element)


		print(li1)
		print(li_odd)
		print(li_even)
		
		
		
Task 7 : 



                [0, 1, 2, 3, 4]
		[1, 2, 3, 4]
		[5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
		[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4]
		[10, 20, 30, 40, 50, 60, 70, 80, 90]
		[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
		[-5, -2, 1, 4]
		[10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]
		[10, 8, 6, 4, 2]

    




